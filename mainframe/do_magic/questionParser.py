import nltk
import do_magic.voila as voila
import do_magic.dataQuery as sqlQuery
import do_magic.answerFinder as answer

# todo capture dates/year ex: how many points did larry bird have in 1971?

def parseQuestion(question):
    tokenized = nltk.word_tokenize(question)
    nonMatchedWord = []  # list of words (NOT NOUNS) which may be used to break ties with spell checker.
    playerResults = []  # list of results generated by noun search.
    wordResults = []  # list of results generated by nonNouns
    statsResults = []


    # DONE DO NOT MODIFY
    tokenized = voila.get_stopwords(tokenized)
    tokenized = voila.get_basewords(tokenized)
    for word in tokenized:
        result = sqlQuery.search_phrase_DB(word)
        if result:
            voila.addToList(wordResults, result)
        else:
            result = sqlQuery.search_player_dB(word)
            if result:
                voila.addToList(playerResults, result)
            else:
                result = sqlQuery.search_stats_DB(word)
                if result:
                    voila.addToList(statsResults, result)
                else:
                    nonMatchedWord.append(word)
    # END DONE DO NOT MODIFY

    # if wordResults:
    #     # todo why processResults on this??? when processresults it empties the array. made this instead
    #     answer.reemovNestings(wordResults)
    #     wordResults = answer.get_output()
    #     wordResults = answer.remove_single_tuple_within_list(wordResults)
    #     answer.reset_output()
    #     # wordResults = processResults(wordResults, nonMatchedWord)
    # if playerResults:
    #     playerResults = processResults(playerResults, nonMatchedWord)
    #     answer.reemovNestings(playerResults)
    #     playerResults = answer.get_output()
    #     playerResults = answer.remove_single_tuple_within_list(playerResults)
    #     answer.reset_output()
    # if statsResults:
    #     statsResults = processResults(statsResults, nonMatchedWord)

    # begin checking for triangulation of results

    tableName = "placeholder"
    playerName = "placeholder"

    wordResults = answer.processResults(wordResults, nonMatchedWord) #processResults begins triangulation.
    #process results returns a tuple or list, if tuple we have triangulate, if not we have multiple entires.
    if isinstance(wordResults, tuple):
        tableName = voila.singlequoteSQLfix(wordResults[5])
    else:
        return "there were multiple hits for your query please limit query to only one field or stat at a time"


    playerResults = answer.processResults(playerResults, nonMatchedWord)  # processResults begins triangulation.
    if tableName == "player_data":
        if isinstance(playerResults, tuple):
            playerName = voila.singlequoteSQLfix(playerResults[0])
        else:
            return playerResults

    statsResults = answer.processResults(statsResults, nonMatchedWord)  # processResults begins triangulation.
    if tableName == "stats":
        if isinstance(statsResults, tuple):
            playerName = voila.singlequoteSQLfix(playerResults[0])
        else:
            return statsResults
    # todo this is the start of the switch statements!!
    return_info = answer.return_tablename_with_player_name(wordResults, playerName)

    if return_info == 0:
        return "unable to find match"
    return return_info




