import nltk
import do_magic.voila as voila
import do_magic.dataQuery as sqlQuery
import do_magic.answerFinder as answer

tableList = ["phrase", "player_data", "stats"]

# return from this statement " ("select * from phrase join lookup_table as LU on phrase.FK=LU.PK where Phrase like "
#              + "'%" + word + "%'") "
# is : [('tall', 56, 56, 'height', 5, 'player_data')]
# 0 = reference 1 = FK 2 = PK 3 = name of column 4 = column number (for getting answer). 5 is table where lookup is found
# also for building SQL statement when getting answer.

# todo I finished general triangulation -- we need to add a counter and a loop to each of these "triangulate" calls
#  so that we can run a max number of times and then exit and call runstat.  If no results are found, we can handle a few
#   different ways, first return any hit we have, second send them to spell checker, third tell them to revise their query
#    test case is "how much does XXXXX weigh"  Weigh is not in the lookup table (semi intentionally).


def parseQuestion(question):
    tokenized = nltk.word_tokenize(question)
    tagged_sentence = voila.tag_Sentence(tokenized)
    tagged_sentence = voila.apostrophefix(tagged_sentence)
    nouns = [] #list of nouns
    nonMatchedWord = [] #list of words (NOT NOUNS) which may be used to break ties with spell checker.
    nameResults = []  #list of results generated by noun search.
    wordResults = [] #list of results generated by nonNouns
    nonMatchedNouns = []

    category = "unknown"

    #searches for word in look up table.
    wordList = voila.get_stopwords(tokenized)
    for word in wordList:
        phrase_result = sqlQuery.dbQuery("select * from phrase join lookup_table as LU on phrase.FK=LU.PK where Phrase"
                                         " like " + "'%" + word + "%'")
        if phrase_result:
            wordResults.append(phrase_result)
        else:
            nonMatchedWord.append(word)

    #begins triangulation of all words (non proper nouns) from lookup table.
    wordResults = answer.triangulate(wordResults)
    print(wordResults)
    if len(wordResults) > 1:
        results = answer.triangulate(breakTie(nonMatchedWord))
        if len(results) > 0:
            wordResults.append(results)
        wordResults = answer.triangulate(wordResults)

    if len(wordResults) > 1:
        while isinstance(wordResults[0], tuple):
            wordResults = answer.flatten(wordResults)


    #sets basic SQL begining
    selectStatment = "select * from player_data where name like "
    for table in tableList:
        if table == wordResults[5]:
            selectStatment = "select * from " + table + " where name like "

    #Separates nouns from nonNouns.  Parses table for match.
    for word in tagged_sentence:
        if word[1] == "NNP" or word[1] == "NN":
            nouns.append(word[0])
            category = "Person"



    # searches for direct name look up from table returned from non-noun check.
    for noun in nouns:
        result = sqlQuery.dbQuery(selectStatment + "'%" + noun + "%'")
        if result:
            nameResults.append(result)
        else:
            nonMatchedNouns.append(noun)

    nameResults = answer.triangulate(nameResults)

    if len(nameResults) > 1:
        results = answer.triangulate(breakTie(nonMatchedNouns))
        if len(results) > 0:
            nameResults.append(results)
        nameResults = answer.triangulate(nameResults)

    #this is ONLY FOR 1 to 1 look ups todo we might need to create an enum for flags
    if len(nameResults) > 1:
        while isinstance(nameResults[0], tuple):
            nameResults = answer.flatten(nameResults)


    playerName = voila.singlequoteSQLfix(nameResults[0])
    tableName = voila.singlequoteSQLfix(wordResults[5])
    finalAnswer = answer.flatten(sqlQuery.dbQuery("select * from "+ tableName + " where name =" + "'" + playerName + "'"))

    finalIndex = wordResults[4]

    return finalAnswer[finalIndex]


def breakTie(nonMatched):
    nonMatched = voila.get_stopwords(nonMatched)
    searchMatch = []
    for word in nonMatched:
        # if it already has double quotes that means its ready to be put into sql query and will not go through spellcheck
        if word.find("''") != -1:
            refined_word = word
        # if it doesnt have double quotes run the spell check
        else:
            refined_word = voila.spell_check(word)
            # if spell check returns something back like o'neal. o'neal is NOT sql query safe. so we need to make it o''
            # neal to make it sql query safe
            if refined_word:
                refined_word = voila.singlequoteSQLfix(refined_word)
                for table in tableList:
                    result = sqlQuery.dbQuery("select * from "+ table + " where * like "+ "'%" + refined_word + "%'")
                    if result:
                        searchMatch.append(result)
    return searchMatch







