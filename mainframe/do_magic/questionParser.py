import nltk
import do_magic.voila as voila
import do_magic.dataQuery as sqlQuery
import do_magic.answerFinder as answer

tableList = ["phrase", "player_data", "stats"]

# return from this statement " ("select * from phrase join lookup_table as LU on phrase.FK=LU.PK where Phrase like "
#              + "'%" + word + "%'") "
# is : [('tall', 56, 56, 'height', 5, 'player_data')]
# 0 = reference 1 = FK 2 = PK 3 = name of column 4 = column number (for getting answer). 5 is table where lookup is found
# also for building SQL statement when getting answer.
# todo we will need to start brain storming all use cases for what is expected as output.  We need to trap any "years"
#  used in the query and a few special words that we will have to update the DB for in the look up table.
#   we should meet early on wednesday 10/30 to start working on a better flow control for the program.
#    there is a new DB also in the folder please upload.


def parseQuestion(question):
    tokenized = nltk.word_tokenize(question)
    tagged_sentence = voila.tag_Sentence(tokenized)
    tagged_sentence = voila.apostrophefix(tagged_sentence)
    nouns = [] #list of nouns
    nonMatched = [] #list of words (nouns or other) which may be used to break ties with spell checker.
    nameResults = []  #list of results generated by noun search.
    wordResults = [] #list of results generated by nonNouns

    category = "unknown"

    #searches for word in look up table.
    for word in tokenized:
        phrase_result = sqlQuery.dbQuery("select * from phrase join lookup_table as LU on phrase.FK=LU.PK where Phrase"
                                         " like " + "'%" + word + "%'")
        if phrase_result:
            wordResults.append(phrase_result)
        else:
             nonMatched.append(word)

    wordResults = answer.find(wordResults)
    print(wordResults)
    if len(wordResults) > 1:
        results = answer.find(breakTie(nonMatched))
        if len(results) > 0:
            wordResults.append(results)
    wordResults = answer.find(wordResults)

    #Separates nouns from nonNouns.  Parses table for match.
    for word in tagged_sentence:
        if word[1] == "NNP" or word[1] == "NN":
            nouns.append(word[0])
            category = "Person"

    # searches for direct name look up from table returned from non-noun check.
    for noun in nouns:
        result = sqlQuery.dbQuery("select * from player_data where name like " + "'%" + noun + "%'")
        if result:
            nameResults.append(result)
        else:
            nonMatched.append(noun)

    name = answer.find(nameResults)

    print(name)

    # print(phrase_result)

    flattened_phrase = answer.flatten(wordResults)
    #print(flattened_phrase[5])
    #print(name)
    #sqlQuery.dbQuery("select * from "+ flattened_phrase[5] + " where name =" + "'" + name[0] + "'")
    #sqlQuery.dbQuery("select * from "+ flattened_phrase[5] + " where name =" + "'" + name[0] + "'")

    print(wordResults)
    return "yes"

def breakTie(nonMatched):
    nonMatched = voila.get_stopwords(nonMatched)
    searchMatch = []
    for word in nonMatched:
        # if it already has double quotes that means its ready to be put into sql query and will not go through spellcheck
        if word.find("''") != -1:
            refined_word = word
        # if it doesnt have double quotes run the spell check
        else:
            refined_word = voila.spell_check(word)
            # if spell check returns something back like o'neal. o'neal is NOT sql query safe. so we need to make it o''
            # neal to make it sql query safe
            if refined_word:
                refined_word = voila.singlequoteSQLfix(refined_word)
                for table in tableList:
                    result = sqlQuery.dbQuery("select * from "+ table + " where * like "+ "'%" + refined_word + "%'")
                    if result:
                        searchMatch.append(result)
    return searchMatch







